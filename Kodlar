const drawBarChart = () => {
  const svg = d3.select(svgRef.current);
  svg.selectAll('*').remove(); // Önceki içerikleri temizle

  const margin = { top: 20, right: 30, bottom: 40, left: 40 };
  
  // Parent container'ın boyutları
  const containerWidth = svg.node().getBoundingClientRect().width;
  const containerHeight = svg.node().getBoundingClientRect().height;
  
  const visibleHeight = Math.min(containerHeight, 400); // Görünür alanın yüksekliği (ilk 10 veri için)

  const width = containerWidth - margin.left - margin.right;
  const height = visibleHeight - margin.top - margin.bottom;

  // Veriyi sadece ilk 10'a sınırlama
  const visibleData = data.slice(0, 10);

  const x = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.value)])
    .range([0, width]);

  const y = d3.scaleBand()
    .domain(visibleData.map(d => d.name))
    .range([0, height])
    .padding(0.1);

  // Grafik alanını oluşturma
  const g = svg
    .attr("width", containerWidth)
    .attr("height", containerHeight)
    .append("g")
    .attr("transform", `translate(${margin.left},${margin.top})`);

  // X eksenini çizme
  g.append("g")
    .attr("class", "x-axis")
    .attr("transform", `translate(0,${height})`)
    .call(d3.axisBottom(x));

  // Y eksenini çizme
  g.append("g")
    .attr("class", "y-axis")
    .call(d3.axisLeft(y));

  // Barlar (Çubuklar) ekleme
  g.selectAll(".bar")
    .data(visibleData)
    .enter().append("rect")
    .attr("class", "bar")
    .attr("x", 0)
    .attr("y", d => y(d.name))
    .attr("width", d => x(d.value))
    .attr("height", y.bandwidth())
    .attr("fill", "steelblue");

  // X ekseni etiketlerini yazma
  g.selectAll(".x-label")
    .data(visibleData)
    .enter().append("text")
    .attr("class", "x-label")
    .attr("x", d => x(d.value) + 5)
    .attr("y", d => y(d.name) + y.bandwidth() / 2)
    .attr("dy", ".35em")
    .text(d => d.value)
    .attr("fill", "black");

  // Kaydırma (Scroll) kutusunu oluşturma
  const scrollContainer = svg.append("g")
    .attr("transform", `translate(${margin.left}, ${margin.top + height + margin.bottom})`);

  scrollContainer.append("rect")
    .attr("width", width)
    .attr("height", containerHeight - height - margin.top - margin.bottom)
    .attr("fill", "transparent")
    .style("stroke", "#000");

  // Scroll çubuğu
  const scrollBarHeight = containerHeight - height - margin.top - margin.bottom;
  
  const scroll = scrollContainer.append("g")
    .attr("class", "scroll")
    .attr("transform", `translate(0,0)`)
    .style("cursor", "pointer")
    .on("mousedown", function(event) {
      const initialY = event.clientY;
      const initialScrollY = scrollBar.attr("y");

      d3.select(window).on("mousemove", function(event) {
        const delta = event.clientY - initialY;
        const newY = Math.max(0, Math.min(scrollBarHeight - scrollBar.attr("height"), initialScrollY + delta));
        
        scrollBar.attr("y", newY);

        // Veriyi kaydır
        const scrollRatio = newY / scrollBarHeight;
        const totalHeight = data.length * y.bandwidth();
        const offset = Math.floor(scrollRatio * (totalHeight - height));
        
        const visibleData = data.slice(offset, offset + 10);
        y.domain(visibleData.map(d => d.name));
        
        g.selectAll(".bar")
          .data(visibleData)
          .transition()
          .duration(50)
          .attr("y", d => y(d.name));

        g.selectAll(".x-label")
          .data(visibleData)
          .transition()
          .duration(50)
          .attr("y", d => y(d.name) + y.bandwidth() / 2);
      });

      d3.select(window).on("mouseup", function() {
        d3.select(window).on("mousemove", null);
      });
    });

  const scrollBar = scroll.append("rect")
    .attr("width", 20)
    .attr("height", 60) // Burada kaydırma çubuğunun uzunluğunu ayarlayın
    .attr("x", width - 20)
    .attr("y", 0)
    .attr("fill", "#aaa");
};
