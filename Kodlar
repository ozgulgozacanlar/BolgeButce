useEffect(() => {
  if (data.length === 0) return;

  const svg = d3.select(svgRef.current);
  svg.selectAll('*').remove(); // Önceki içerikleri temizle

  const margin = { top: 20, right: 0, bottom: 40, left: 100 }; 
  const height = 500;

  // X ekseni için linear scale
  const xScale = d3.scaleLinear()
    .domain([0, d3.max(data, (d) => d.value)])  // Verilerin max değeri
    .range([0, 0]);  // Başlangıçta range'i geçici olarak 0'a ayarlıyoruz.

  // Y ekseni için band scale
  const yScale = d3.scaleBand()
    .domain(data.map((d) => d.name))
    .range([margin.top, height - margin.bottom]) // Grafik yüksekliği arasında
    .padding(0.3);

  // Grafik alanını oluşturma
  const svgWidth = svg.node().getBoundingClientRect().width - margin.left - margin.right;
  svg.attr("width", svgWidth + margin.left + margin.right).attr("height", height);

  const g = svg.append("g")
    .attr("transform", `translate(${margin.left},${margin.top})`);

  // Barların genişliğini ve metinlerin konumlarını hesaplıyoruz
  const barWidth = d3.scaleLinear()
    .domain([0, d3.max(data, (d) => d.value)])  // Değerlerin max'ını kullanıyoruz
    .range([0, svgWidth]); // Bar genişliği grafik alanı kadar olacak

  // X eksenini ekliyoruz
  g.append("g")
    .attr("class", "x-axis")
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(barWidth).ticks(5));

  // Y eksenini ekliyoruz
  g.append("g")
    .attr("class", "y-axis")
    .call(d3.axisLeft(yScale));

  // Bar çubuklarını ve değerleri çiziyoruz
  const bars = g.selectAll(".bar")
    .data(data);

  bars.enter()
    .append("rect")
    .attr("class", "bar")
    .attr("x", 0) // Yalnızca X koordinatını ayarlıyoruz
    .attr("y", (d) => yScale(d.name)) // Y konumunu name'e göre ayarlıyoruz
    .attr("width", (d) => barWidth(d.value)) // X ekseni boyunca barın genişliği
    .attr("height", yScale.bandwidth()) // Y eksenindeki her barın yüksekliği
    .attr("fill", "steelblue");

  // Barların sağına değerleri yazıyoruz (barların bitiş noktasına metin ekliyoruz)
  bars.enter()
    .append("text")
    .attr("class", "value")
    .attr("x", (d) => barWidth(d.value) + 5) // Çubuğun sağında değeri gösteriyoruz
    .attr("y", (d) => yScale(d.name) + yScale.bandwidth() / 2) // Y eksenindeki barın ortasında
    .attr("dy", ".35em")
    .text((d) => d.value); // Değerlerin gösterimi

}, [data]);
