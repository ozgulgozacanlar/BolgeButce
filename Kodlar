 useEffect(() => {
        if (data.length === 0) return;
       
        const svg = d3.select(svgRef.current);
        svg.selectAll('*').remove(); // Önceki içerikleri temizle

        const margin = { top: 20, right: 0, bottom: 20, left: 100 };    
        const width = svg.node().getBoundingClientRect().width - margin.left/2;
        const height = 500; 

        svg
          .attr("width", width)
          .attr("height", height);
    
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, (d) => d.value)])
          .range([0, width - margin.left - margin.right]);
    
        const yScale = d3.scaleBand()
          .domain(data.map((d) => d.name))
          .range([margin.top, height - margin.bottom])
          .padding(0.2);
    
        // X eksenini ekliyoruz
        svg.selectAll(".x-axis")
          .data([0])
          .enter().append("g")
          .attr("transform", `translate(${margin.left}, ${height - margin.bottom})`)
          .call(d3.axisBottom(xScale).ticks(0));

        // Y eksenini ekliyoruz
        svg.selectAll(".y-axis")
          .data([0])
          .enter().append("g")
          .attr("transform", `translate(${margin.left}, 0)`)
          .call(d3.axisLeft(yScale));
    
        // Bar çubuklarını ve değerleri çiziyoruz
        const bars = svg.selectAll(".bar")
          .data(data, (d) => d.name);
    
        bars.enter()
          .append("rect")
          .attr("class", "bar")
          .attr("x", margin.left) // Yalnızca X koordinatı margin'a göre
          .attr("y", (d) => yScale(d.name))
          .attr("width", (d) => xScale(d.value)) // X ekseni boyunca genişlik
          .attr("height", yScale.bandwidth()) // Y eksenindeki her barın yüksekliği
          .attr("fill", "steelblue");
    
        // Her barın sağına değerleri yazıyoruz
        bars.enter()
          .append("text")
          .attr("class", "value")
          .attr("x", (d) => margin.left + xScale(d.value) + 5) // Çubuğun sağında değer
          .attr("y", (d) => yScale(d.name) + yScale.bandwidth() / 2)
          .attr("dy", ".35em")
          .text((d) => d.value.toFixed(2)); // Değerlerin gösterimi
  
      // Çubuğun sağındaki değerler için yazıyı yerleştiriyoruz
    }, [data]);
