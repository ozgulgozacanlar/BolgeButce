useEffect(() => {
  if (data.length === 0) return;

  const svg = d3.select(svgRef.current);
  svg.selectAll('*').remove(); // Önceki içerikleri temizle

  const margin = { top: 0, right: 20, bottom: 20, left: 30 };
  const containerWidth = svg.node().getBoundingClientRect().width; // Grafik container'ının genişliği
  const height = 1000;

  // İlk olarak, xScale için genişlik değeri container'a uyacak şekilde ayarlanır
  const xScale = d3.scaleLinear()
    .domain([0, d3.max(data, (d) => d.value)]) // Verilerin en yüksek değeri
    .range([0, containerWidth - margin.left - margin.right]); // Container genişliğine uyacak şekilde

  // Y ekseninin scale'ini name'e göre ayarlıyoruz
  const yScale = d3.scaleBand()
    .domain(data.map((d) => d.name))
    .range([margin.top, height - margin.bottom])
    .padding(0.6);

  svg
    .attr("width", containerWidth)
    .attr("height", height);

  // Grafik alanını oluşturma
  const g = svg.append("g")
    .attr("transform", `translate(${margin.left},${margin.top})`);

  // X eksenini ekliyoruz
  const xAxis = g.append("g")
    .attr("class", "x-axis")
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(xScale));

  // Y eksenini ekliyoruz
  g.append("g")
    .attr("class", "y-axis")
    .call(d3.axisLeft(yScale));

  // Bar çubuklarını ve değerleri çiziyoruz
  const bars = g.selectAll(".bar")
    .data(data);

  bars.enter()
    .append("rect")
    .attr("class", "bar")
    .attr("x", 0) // X konumunu margin ile ayarlıyoruz
    .attr("y", (d) => yScale(d.name)) // Y konumunu name'e göre ayarlıyoruz
    .attr("width", (d) => xScale(d.value)) // Barın genişliği
    .attr("height", yScale.bandwidth()) // Y eksenindeki her barın yüksekliği
    .attr("fill", "steelblue");

  // Her barın sağına değerleri yazıyoruz
  bars.enter()
    .append("text")
    .attr("class", "value")
    .attr("x", (d) => xScale(d.value) + 5) // Çubuğun sağında değer
    .attr("y", (d) => yScale(d.name) + yScale.bandwidth() / 2) // Y eksenindeki her barın ortasında
    .attr("dy", ".35em")
    .text((d) => d.value); // Değerlerin gösterimi

  // Y eksenindeki metinleri 'value' olarak değiştiriyoruz
  g.selectAll(".y-axis text")
    .text((d) => {
      const matchingData = data.find(item => item.name === d);
      return matchingData ? matchingData.value : d;
    });

}, [data]);
