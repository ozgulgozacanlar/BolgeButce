import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

const GaugeChart = ({ value1, value2, value3, target, centerText }) => {
  const svgRef = useRef(null); // SVG referansı
  const containerRef = useRef(null); // Chart'ın sarmaladığı div referansı
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 }); // Boyutları tutacak state

  // Boyutları güncellemek için useEffect
  useEffect(() => {
    const updateDimensions = () => {
      if (containerRef.current) {
        setDimensions({
          width: containerRef.current.clientWidth,  // container genişliği
          height: containerRef.current.clientHeight,  // container yüksekliği
        });
      }
    };

    // Boyutları başlatmak için
    updateDimensions();

    // Resize olayı dinleyicisi
    window.addEventListener('resize', updateDimensions);

    return () => {
      window.removeEventListener('resize', updateDimensions);
    };
  }, []);

  // useEffect ile gauge'ı çizdirme
  useEffect(() => {
    const { width, height } = dimensions;
    if (width === 0 || height === 0) return; // Boyutlar hazır olana kadar bekle

    const radius = Math.min(width, height) / 1.5;  // Grafiğin yarıçapı
    const arcWidth = 16;
    const gap = 5;
    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height)
      .append('g')
      .attr('transform', `translate(${width / 2},${height - 40})`);

    // Arc'leri çizdirme
    const scale = d3.scaleLinear().domain([0, 100]).range([0, Math.PI]);
    const arc = d3.arc()
      .innerRadius(radius - arcWidth)
      .outerRadius(radius)
      .startAngle(0)
      .endAngle(d => scale(d))
      .cornerRadius(10);

    const colors = ['#d46364', '#dc9465', '#7ca444'];
    const totalValue = value1 + value2 + value3;
    const angle1 = (value1 / totalValue) * Math.PI;
    const angle2 = (value2 / totalValue) * Math.PI;
    const angle3 = (value3 / totalValue) * Math.PI;
    const gapAngle = (gap / 180) * Math.PI;

    svg.selectAll('.arc')
      .data([
        { value: value1, angle: angle1, color: colors[0] },
        { value: value2, angle: angle2, color: colors[1] },
        { value: value3, angle: angle3, color: colors[2] },
      ])
      .enter().append('path')
      .attr('class', 'arc')
      .attr('d', d => arc(d.value))
      .attr('fill', d => d.color)
      .attr('transform', (d, i) => {
        const rotationAngle = i === 0 ? -90 :
          i === 1 ? (angle1 + gapAngle - Math.PI / 2) * 180 / Math.PI :
          (angle1 + angle2 + gapAngle - Math.PI / 2) * 180 / Math.PI;
        return `rotate(${rotationAngle})`;
      });

    // Hedefi ekleyelim
    const targetAngle = (target / 100) * Math.PI - Math.PI / 2 + (3 * Math.PI / 2);

    const addTargetCircle = (angle) => {
      const x = (radius - arcWidth - 10) * Math.cos(angle);
      const y = (radius - arcWidth - 10) * Math.sin(angle);
      svg.append('circle')
        .attr('cx', x)
        .attr('cy', y - 20)
        .attr('r', 14)
        .attr('fill', '#7ca444')
        .style('opacity', 0.8)
        .style('transition', 'opacity 0.3s ease-in-out');

      svg.append('circle')
        .attr('cx', x)
        .attr('cy', y - 20)
        .attr('r', 5)
        .attr('fill', '#FFFFFF')
        .style('opacity', 1);
    };

    addTargetCircle(targetAngle);

    // Merkezi metin
    svg.append('text')
      .attr('class', 'center-text')
      .attr('x', 0)
      .attr('y', -40)
      .attr('text-anchor', 'middle')
      .style('font-size', '40px')
      .style('font-weight', '600')
      .text(`${target}%`);

    svg.append('text')
      .attr('class', 'center-text')
      .attr('x', 0)
      .attr('y', 10)
      .attr('text-anchor', 'middle')
      .style('font-size', '22px')
      .style('font-weight', '400')
      .text(centerText);

    // %0 ve %100 etiketleri
    svg.append('text')
      .attr('x', -radius + 10)
      .attr('y', 35)
      .attr('text-anchor', 'middle')
      .style('font-size', '20px')
      .style('font-weight', '400')
      .text('0%');

    svg.append('text')
      .attr('x', radius - 10)
      .attr('y', 35)
      .attr('text-anchor', 'middle')
      .style('font-size', '20px')
      .style('font-weight', '400')
      .text('100%');
  }, [dimensions, value1, value2, value3, target, centerText]);

  return (
    <div ref={containerRef} style={{ width: '100%', height: 'auto' }}>
      <svg ref={svgRef}></svg>
    </div>
  );
};

export default GaugeChart;
